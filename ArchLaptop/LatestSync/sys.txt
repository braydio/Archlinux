=== fstab ===
# Static information about the filesystems.
# See fstab(5) for details.

# <file system> <dir> <type> <options> <dump> <pass>
# /dev/mmcblk0p2
UUID=9a758e0d-bd97-491d-925a-0f5cac96ccba	/         	ext4      	rw,relatime	0 1

# /dev/mmcblk0p1
UUID=3249-4DBD      	/boot     	vfat      	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro	0 2

# RAM Swapfile
/swapfile none swap sw 0 0

# Network Attached Storage
192.168.1.239:/mnt/netstorage /mnt/netstorage nfs defaults,noatime 0 0

# Shared drive from Desktop
//192.168.1.68/Shared /home/braydenchaffee/mnt/windows-share cifs credentials=/home/braydenchaffee/.smbcredentials,rw,uid=1000,gid=1000,vers=3.0 0 0

# Jellyfin Stuff
//192.168.1.68/Jellyfin /home/braydenchaffee/mnt/TempMedia cifs credentials=/home/braydenchaffee/.smbcredentials,rw,uid=1000,gid=1000,vers=3.0 0 0





=== hostname ===
archlinux



=== hosts ===
127.0.0.1 localhost
::1 localhost
127.0.1.1 archlinux.localdomain archlinux



=== pacman.conf ===
#
# /etc/pacman.conf
#
# See the pacman.conf(5) manpage for option and repository directives

#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
#CacheDir    = /var/cache/pacman/pkg/
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
#HookDir     = /etc/pacman.d/hooks/
HoldPkg     = pacman glibc
#XferCommand = /usr/bin/curl -L -C - -f -o %o %u
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
Architecture = auto

# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
#IgnorePkg   =
#IgnoreGroup =

#NoUpgrade   =
#NoExtract   =

# Misc options
#UseSyslog
#Color
#NoProgressBar
CheckSpace
VerbosePkgLists
ParallelDownloads = 5
DownloadUser = alpm
#DisableSandbox

# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required

# NOTE: You must run `pacman-key --init` before first using pacman; the local
# keyring can then be populated with the keys of all official Arch Linux
# packagers with `pacman-key --populate archlinux`.

#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have $repo replaced by the name of the current repo
#   - URLs will have $arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#

# The testing repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.

#[core-testing]
#Include = /etc/pacman.d/mirrorlist

[core]
Include = /etc/pacman.d/mirrorlist

#[extra-testing]
#Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

# If you want to run 32 bit applications on your x86_64 system,
# enable the multilib repositories as required here.

#[multilib-testing]
#Include = /etc/pacman.d/mirrorlist

#[multilib]
#Include = /etc/pacman.d/mirrorlist

# An example of a custom package repository.  See the pacman manpage for
# tips on creating your own repositories.
#[custom]
#SigLevel = Optional TrustAll
#Server = file:///home/custompkgs



=== zram-generator.conf ===
[zram0]
zram-size = ram / 2
compression-algorithm = zstd



=== .bashrc ===
# ~/.bashrc
# Exit if not running interactively
[[ $- != *i* ]] && return

# TEMPORARY
# echo OpenAI Email Assistant
# echo OpenAI Alpaca API

# Environment Variables
export TERM=xterm-256color
export XDG_SESSION_TYPE=wayland
export XDG_CURRENT_DESKTOP=Hyprland
export XDG_SESSION_DESKTOP=Hyprland
export XDG_RUNTIME_DIR=/run/user/$(id -u)

# Changed below when bash wasnt working, now idk which to use
# export PATH="$PATH:/usr/local/bin"
# export PATH="/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
# export FZF_DEFAULT_OPTS="--color=fg:#ebdbb2,bg:#282828,hl:#458588" # Colors for FZF
# export PATH="/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
PATH=usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin::/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl
# Add pyenv to PATH
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"

# Aliases from .bash_aliases
if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

# SSH Persistence (Auth) - check if running
if [ -z "$SSH_AUTH_SOCK" ]; then
  eval "$(ssh-agent -s)"
fi

# Bash Completion
if [ -f /usr/share/bash-completion/bash_completion ]; then
  . /usr/share/bash-completion/bash_completion
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash # Fuzzy finder Bash completion

bind 'TAB:menu-complete'               # Tab cycling
bind '"\e[Z": menu-complete-backward'  # Shift tab back-cycling
bind '"\e[B": history-search-forward'  # History aware completion
bind '"\e[A": history-search-backward' # History aware backwards
bind "set colored-stats on"

# Functions
cdr() {
  clear && cd "$1" && ls -a --color=auto
}

cds() {
  cd "$1" && ls -a --color=auto
}

cdc() {
  cd "$HOME/$1" && ls -a --color=auto
} # Because fuck a tilde (is that a tilde? Is that even how you spell it?)

# Prompt
PS1='\[\e[0;32m\][\u@\h \W]\$ \[\e[m\]'



=== .zshrc ===

export TERM=xterm-256color
export XDG_SESSION_TYPE=wayland
export XDG_CURRENT_DESKTOP=Hyprland
export XDG_SESSION_DESKTOP=Hyprland

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000

bindkey -e
# End of lines configured by zsh-newuser-install

# The following lines were added by compinstall
zstyle :compinstall filename '/home/braydenchaffee/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall



=== hyprland.conf ===

# #######################################################################################
#
# #######################################################################################

# https://wiki.hyprland.org/Configuring/

# You can split this configuration into multiple files
# Create your files separately and then link them to this file like this:
# source = ~/.config/hypr/myColors.conf


################
### MONITORS ###
################

# See https://wiki.hyprland.org/Configuring/Monitors/

monitor=eDP-1, preferred, auto, auto
monitor=HDMI-A-1, preferred, auto-up, auto

###################
### MY PROGRAMS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/

# Set programs that you use
$terminal = kitty
$fileManager = dolphin
$menu = wofi --show drun
$keyreference = ~/Scripts/utility/KeybindSearch.py
$kitty = ~/Scripts/kitty/launch-kitty.sh

#################
### AUTOSTART ###
#################

# Autostart necessary processes (like notifications daemons, status bars, etc.)
# Or execute your favorite apps at launch like this:

exec-once = $kitty
exec-once = waybar & hyprpaper & mako
exec-once = firefox --kiosk http://chat.openai.com
# exec-once = qbittorrent


#############################
### ENVIRONMENT VARIABLES ###
#############################

# See https://wiki.hyprland.org/Configuring/Environment-variables/

env = XCURSOR_SIZE,24
env = HYPRCURSOR_SIZE,24

#####################
### LOOK AND FEEL ###
#####################

# Refer to https://wiki.hyprland.org/Configuring/Variables/
# https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors


# Custom Test gap settings
# Set inner and outer gaps to zero
# Refer to https://wiki.hyprland.org/Configuring/Variables/

general {
    gaps_in = 2   # No gaps between windows
    gaps_out = 10  # No gaps between windows and the screen edge
    border_size = 4
    resize_on_border = false
    allow_tearing = false
    layout = dwindle
    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.inactive_border = rgba(595959aa)
}

decoration {
    rounding = 0  # No rounded corners
    active_opacity = 1.0
    inactive_opacity = 0.8
    shadow {
        enabled = true
        range = 4
        render_power = 3
        color = rgba(1a1a1aee)
    }
    blur {
        enabled = true
        size = 7
        passes = 4
        new_optimizations = true
        vibrancy = 0.1696
    }
}



# https://wiki.hyprland.org/Configuring/Variables/#animations
animations {
    enabled = true # yes, please :)

    # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

    bezier = easeOutQuint,0.23,1,0.32,1
    bezier = easeInOutCubic,0.65,0.05,0.36,1
    bezier = linear,0,0,1,1
    bezier = almostLinear,0.5,0.5,0.75,1.0
    bezier = quick,0.15,0,0.1,1

    animation = global, 1, 10, default
    animation = border, 1, 5.39, easeOutQuint
    animation = windows, 1, 4.79, easeOutQuint
    animation = windowsIn, 1, 4.1, easeOutQuint, popin 87%
    animation = windowsOut, 1, 1.49, linear, popin 87%
    animation = fadeIn, 1, 1.73, almostLinear
    animation = fadeOut, 1, 1.46, almostLinear
    animation = fade, 1, 3.03, quick
    animation = layers, 1, 3.81, easeOutQuint
    animation = layers, 1, 3.81, easeOutQuint
    animation = layersIn, 1, 4, easeOutQuint, fade
    animation = layersOut, 1, 1.5, linear, fade
    animation = fadeLayersIn, 1, 1.79, almostLinear
    animation = fadeLayersOut, 1, 1.39, almostLinear
    animation = workspaces, 1, 1.94, almostLinear, fade
    animation = workspacesIn, 1, 1.21, almostLinear, fade
    animation = workspacesOut, 1, 1.94, almostLinear, fade
}

# Ref https://wiki.hyprland.org/Configuring/Workspace-Rules/
# "Smart gaps" / "No gaps when only"
# uncomment all if you wish to use that.
# workspace = w[tv1], gapsout:0, gapsin:0
# workspace = f[1], gapsout:0, gapsin:0
# windowrulev2 = bordersize 0, floating:0, onworkspace:w[tv1]
# windowrulev2 = rounding 0, floating:0, onworkspace:w[tv1]
# windowrulev2 = bordersize 0, floating:0, onworkspace:f[1]
# windowrulev2 = rounding 0, floating:0, onworkspace:f[1]

# See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
dwindle {
    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = true # You probably want this
}

# See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
master {
    new_status = master
}

# https://wiki.hyprland.org/Configuring/Variables/#misc
misc {
    force_default_wallpaper = -1 # Set to 0 or 1 to disable the anime mascot wallpapers
    disable_hyprland_logo = false # If true disables the random hyprland logo / anime girl background. :(
}


#############
### INPUT ###
#############

# https://wiki.hyprland.org/Configuring/Variables/#input
input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =

    follow_mouse = 1

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.

    touchpad {
        natural_scroll = false
    }
}

# https://wiki.hyprland.org/Configuring/Variables/#gestures
gestures {
    workspace_swipe = true		# Enable wkspace switching    
}

# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more
device {
    name = epic-mouse-v1
    sensitivity = -0.5
}

###################
### KEYBINDINGS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/
$mainMod = SUPER # Sets "Windows" key as main modifier

# Main binds
bind = $mainMod, W, exec, ~/Scripts/kitty/launch-kitty.sh
bind = $mainMod, Q, killactive
bind = $mainMod, E, exec, dolphin
bind = $mainMod, F, fullscreen
bind = $mainMod, V, togglefloating,
bind = $mainMod, R, exec, rofi -show drun
bind = $mainMod, Return, exec, kitty
bind = $mainMod SHIFT, Return, exec, ghostty
bind = $mainMod, P, pseudo, # dwindle
bind = $mainMod, J, togglesplit, #dwindle
bind = $mainMod, K, exec, hyprctl dispatch focuswindow "title:wayterm"
bind = $mainMod SHIFT, N, exec, hyprctl dispatch splitratio -0.3
bind = $mainMod SHIFT, M, exec, hyprctl dispatch splitratio +0.3

#Move focus with mainMod + arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# Resize with mainMod + alt + arrow keys
binde = $mainMod ALT, right, resizeactive, 25 0
binde = $mainMod ALT, left, resizeactive, -25 0
binde = $mainMod ALT, up, resizeactive, 0 -25
binde = $mainMod ALT, down, resizeactive, 0 25

# Move windows around screen - to corners
binde = $mainMod SHIFT, left, moveactive, left
binde = $mainMod SHIFT, right, moveactive, r
binde = $mainMod SHIFT, up, moveactive, u
binde = $mainMod SHIFT, down, moveactive, d

# Move windows around screen
binde = $mainMod CTRL, left, moveactive, -50 0 
binde = $mainMod CTRL, right, moveactive, 50 0
binde = $mainMod CTRL, up, moveactive, 0 -50
binde = $mainMod CTRL, down, moveactive, 0 50

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# Scroll through existing workspaces with SPACE
binde = $mainMod, SPACE, workspace, e+1
binde = $mainMod ALT, SPACE, workspace, e-1

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous

# to switch between windows in a floating workspace
bind = SUPER, Tab, cyclenext,           # change focus to another window
bind = SUPER, Tab, bringactivetotop,    # bring it to the top

# Colored terminal launches / themes
bind = $mainMod, T, submap, themes
submap = themes
bind = , D, exec, ~/Scripts/terminal-mgmt/ColorTerm.sh dark
bind = , L, exec, ~/Scripts/terminal-mgmt/ColorTerm.sh light
bind = , K, exec, ~/Scripts/terminal-mgmt/KittyTheme.sh
bind = , G, exec, ghostty
bind = $mainMod, Z, submap, reset  # Exit themes submap


# Switch to 'resize' submap
bind = $mainMod, L, submap, resize
submap = resize

# Keep mappings for movefocus
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

binde = $mainMod ALT, right, moveactive, 100 0
binde = $mainMod ALT, left, moveactive, -100 0
binde = $mainMod ALT, up, moveactive, 0 -80
binde = $mainMod ALT, down, moveactive, 0 80

binde = $mainMod CTRL, right, resizeactive, 50 0  
binde = $mainMod CTRL, left, resizeactive, -50 0
binde = $mainMod CTRL, up, resizeactive, 0 -50
binde = $mainMod CTRL, down, resizeactive, 0 50

binde = $mainMod SHIFT, right, resizeactive, 100 0
binde = $mainMod SHIFT, left, resizeactive, -100 0
binde = $mainMod SHIFT, up, resizeactive, 0 -100
binde = $mainMod SHIFT, down, resizeactive, 0 100

bind = $mainMod, Z, submap, reset
submap = reset

bind = $mainMod ALT, Y, submap, scripts
submap = scripts


# Quick backup key
bind = , B, exec, ~/Scripts/file-mgmt/QuickBackup.sh

# Upload system files script
bind = , U, exec, ~/Scripts/file-mgmt/upload-sysfiles.sh

# Notes management
bind = , N, exec, ~/Scripts/notes.sh mynote
bind = SHIFT, N, exec, ~/Scripts/notes.sh newnote

# Kitty themes script (fzf selector)
bind = , T, exec, ~/scripts/kittytheme.sh

# Screenshot tool
bind = , P, exec, ~/Scripts/utility/screenshot.sh

# Custom terminal themes
bind = , C, exec, ~/Scripts/terminal-mgmt/ColorTerm.sh dark
bind = SHIFT, C, exec, ~/Scripts/terminal-mgmt/ColorTerm.sh light

# Random terminal themes
bind = , R, exec, ~/Scripts/terminal-mgmt/ctRandom.sh dark
bind = SHIFT, R, exec, ~/Scripts/terminal-mgmt/ctRandom.sh light

# Keybind Reference Guide
bind = , K, exec, ~/Scripts/utility/KeybindReference.sh

bind = $mainMod SHIFT, R, exec, hyprctl reload
bind = $mainMod ALT, R, exec, reboot

# Exit 'scripts' submap
bind = $mainMod, Z, submap, reset
submap = reset



##############################
### WINDOWS AND WORKSPACES ###
##############################

# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
# See https://wiki.hyprland.org/Configuring/Workspace-Rules/ for workspace rules

# Example windowrule v1
# windowrule = float, ^(kitty)$

# Waybar Small Terminal Instance
windowrulev2 = float, title:wayterm
windowrulev2 = size 369 50, title:wayterm
windowrulev2 = move 995 716, title:wayterm
windowrulev2 = pin, float, title:wayterm
windowrulev2 = rounding 10, title:wayterm
windowrulev2 = noinitialfocus, title:wayterm
windowrulev2 = bordersize 0, title:wayterm
windowrulev2 = decorate [on], title:wayterm
windowrulev2 = noborder [on], title:wayterm
windowrulev2 = opacity [0.8], title:wayterm
windowrulev2 = xray [on], title:wayterm
# Example windowrule v2
# windowrulev2 = float,class:^(kitty)$,title:^(kitty)$

# Ignore maximize requests from apps. You'll probably like this.
windowrulev2 = suppressevent maximize, class:.*

# Fix some dragging issues with XWayland,
windowrulev2 = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0



=== config ===
{
    "position": "bottom",
    "height": 40,
    "style": "style.css",
    "modules-left": ["hyprland/workspaces", "hyprland/window"],
    "modules-right": ["custom/terminal"],
    "modules-center": [
        "pulseaudio",
        "network",
        "backlight",
        "battery",
        "cpu",
        "memory",
        "tray"
    ],
    "hyprland/workspaces": {
        "disable-scroll": false,
        "enable-shortnames": true,
        "strip-wl": true
    },
    "custom/gmail": {
        "exec": "~/Scripts/waybar/custom-gmail.sh",
        "interval": 300,
        "return-type": "json",
        "on-click": "exec ~/Projects/OpenAI/GPTMail/main.py"
    },
    "custom/terminal": {
        "format": "wayterm 󰨊",
        "on-click": "kitty -T wayterm -c ~/.config/kitty/wayterm.conf -e bash",
        "tooltip": "Wayterm"
    },
    "custom/cpu_temp": {
        "exec": "~/Scripts/waybar/cpu-temp.sh",
        "interval": 15,
        "return-type": "json",
        "format": "󰔏 ICON BANK  󰴷  ",
        "tooltip": "cpu temperature"
    },
    "tray": {
        "spacing": 10
    },
    "clock": {
        "format": "󰀠 {:%I:%M %p}",
        "format-alt": " {:%m-%d-%Y}",
        "tooltip": "clock"
    },
    "cpu": {
        "format": "{icon}",
        "format-alt": "󰊠 CPU: {usage}%",
        "tooltip": "cpu usage",
        "on-click": "waybar-msg action toggle-format cpu",
        "format-icons": ["", "", "󰛕", "󱓈"],
        "states": {
            "low": 20,
            "moderate": 60,
            "high": 80
        }
    },
    "memory": {
        "format": "{icon}",
        "format-alt": " RAM: {used}Gb of {total}Gb",
        "tooltip": "memory usage",
        "on-click": "waybar-msg action toggle-format memory",
        "format-icons": ["", "󰛕", "󰐸"], 
        "states": {
            "low": 30,
            "moderate": 70,
            "high": 90
        }
    },
    "backlight": {
        "format": "{icon}",
        "format-alt": "Brightness: {percent}%",
        "format-icons": ["", "", ""],
        "tooltip": "backlight",
        "on-click": "waybar-msg action toggle-format backlight"
    },
    "network": {
        "format": "{icon}",
        "format-alt": "Wi-Fi: {essid} ({signalStrength}%)",
        "tooltip": "Network {essid}",
        "on-click": "waybar-msg action toggle-format network",
        "format-icons": [""]
    },
    "battery": {
        "format": "{icon}",
        "format-alt": "BAT: {capacity}%",
        "tooltip": "Battery",
        "on-click": "waybar-msg action toggle-format battery",
        "format-icons": ["", "", "", "", ""],
        "charging-format-icons": ["⚡", "", "🔌"],
        "states": {
            "critical": 15,
            "low": 30,
            "medium": 60,
            "high": 95
        }
    },
    "pulseaudio": {
        "format": "{icon}",
        "format-alt": "Speaker: {volume}%",
        "tooltip": "speakers",
        "on-click": "waybar-msg action toggle-format pulseaudio",
        "format-icons": ["", "", "", "", ""],
        "states": {
            "muted": true,
            "low": 0,
            "medium": 1,
            "high": 50
        }
    }
}




=== style.css ===
@import "way_colors.css";

* {
  font-family: "Jetbrains Mono Nerd Font", monospace;
  font-size: 14px;
  min-height: 0;
}

/* Make the entire bar visible with a subtle background and rounded corners */
#waybar {
  background-color: @crust;
  color: @darkblue;
  margin: 1px;
  padding: 1px 1px;
  border-radius: 5px;
}

/* Add spacing between each module */
#waybar > * {
  margin: 2px 2px;
}

#custom-terminal {
  padding: 1rem 1rem;
  margin-right: 1.5rem;
  color: @maroon;
  font-size: 14px;
}

/* Increase font size for icons */
#waybar button, #waybar .icon {
  font-size: 56px/* Adjust this value to your preference */
}
#custom-gmail button:hover {
  color: @maroon;
  border-radius: 5px;
}

/* Workspaces styling */
#workspaces {
  color: @mantle;
  border-radius: 1px;
  margin: 1px;
  background-color: @overlay0;
  margin-left: 1rem;
  margin-right: 1rem;
}

#workspaces button {
  color: @sapphire;
  border-radius: 0px;
  padding: 2px;
  background-color: @mantle;
}

#workspaces button.active {
  color: @crust;
  background-color: @sapphire;
  border-radius: 2px;
}

#workspaces button:hover {
  color: @maroon;
  border-radius: 5px;
}


/* All modules styling */
#pulseaudio,
#memory,
#backlight,
#clock,
#custom-cpu_temp,
#cpu,
#battery,
#network {
  background-color: @surface0;
  padding: 0.5rem 1rem;
  margin: 5px 0;
  border-radius: 0px;
}

/* Weather Module */
#custom-weather {
  color: @sky;
  background-color: @mantle;
  border-radius: 10px;
  padding: 5px 10px;
  margin: 5px;
  font-weight: bold;
}

#custom-weather:hover {
  background-color: @blue;
  color: @crust;
  transition: 0.3s;
}

/* Specific styles */
#clock {
  color: @blue;
  border-radius: 0px 1rem 1rem 0px;
  margin-right: 1rem;
}

#backlight {
  color: @yellow;
}

#memory {
  color: @blue;
  margin-right: 1rem;
  border-radius: 0px 1rem 1rem 0px;
}

#pulseaudio {
  color: @blue;
  margin-left: 1rem;
  border-radius: 1rem 0px 0px 1rem;
}



=== libinput-gestures.conf ===
# Configuration file for libinput-gestures.
# Mark Blakeney, Sep 2015
#
# The default configuration file exists at /etc/libinput-gestures.conf
# but a user can create a personal custom configuration file at
# ~/.config/libinput-gestures.conf.
#
# Lines starting with '#' and blank lines are ignored. Currently
# "gesture" and "device" configuration keywords are supported as
# described below. The keyword can optionally be appended with a ":" (to
# maintain compatibility with original format configuration files).
#
# Each gesture line has 3 [or 4] arguments separated by whitespace:
#
# action motion [finger_count] command
#
# where action and motion is either:
#     swipe up
#     swipe down
#     swipe left
#     swipe right
#     swipe left_up
#     swipe left_down
#     swipe right_up
#     swipe right_down
#     pinch in
#     pinch out
#     pinch clockwise
#     pinch anticlockwise
#     hold on (hold gesture available since libinput 1.19)
#

# xdotool does not work with native Wayland clients.

###########################################################################
# Do maximize and fullscreen stuff
gesture swipe up 3 hyprctl dispatch fullscreen 1
gesture swipe down 3 hyprctl dispatch fullscreen 0
gesture pinch in 3 hyprctl dispatch togglefloating
gesture pinch out 3 hyprctl dispatch pseudo
# gesture swipe up 4 hyprctl dispatch fullscreen 0
# gesture swipe down 4 hyprctl dispatch fullscreen 0

# :split ~/.gesture swipe right 3 hyprctl dispatch layoutmsg cyclenext
# gesture swipe left 3 hyprctl dispatch layoutmsg cycleprev

gesture swipe up 4 kitty
gesture swipe down 4 hyprctl dispatch killactive
gesture hold on 4 hyprctl dispatch togglesplit
gesture hold on 3 hyprctl dispatch rofi -show drun rofi -show-drun

# Browser go forward (works only for Xorg, and Xwayland clients)
# gesture swipe left	xdotool key alt+Right

# Browser go back (works only for Xorg, and Xwayland clients)
# gesture swipe right	xdotool key alt+Left
# Example to change audio volume (this works on both Wayland and Xorg):
# Note each swipe only steps volume once.
# swipe up   4 amixer set Master "8%+"
# swipe down 4 amixer set Master "8%-"

###############################################################################
# PINCH GESTURES:
###############################################################################
gesture pinch in 2 hyprctl dispatch splitratio +0.5
gesture pinch out 2 hyprctl dispatch splitratio -0.5




=== init.lua ===
-- bootstrap lazy.nvim, LazyVim and your plugins
require("config.lazy")



=== kitty.conf ===
# Font Settings
# font_family JetBrains Mono Nerd
font_size 8.0
# bold_font auto
# italic_font auto

# Color Theme
# background #282c34
# foreground #abb2bf
# cursor     #528bff
# selection_background #3e4451
# selection_foreground #ffffff

# Window Layout
tab_bar_edge top
enable_audio_bell no
hide_window_decorations no

# Keybindings
map ctrl+shift+enter new_window
map ctrl+shift+t     new_tab
map ctrl+shift+w     close_window
map ctrl+shift+n     next_layout
map ctrl+shift+n     reload_config

# Scrollback
scrollback_lines 10000

# Shell (default to your Arch setup)
shell /bin/bash

# Miscellaneous
allow_remote_control yes
bell_on_tab yes



# BEGIN_KITTY_THEME
# bl1nk
include current-theme.conf
# END_KITTY_THEME

# BEGIN_KITTY_FONTS
font_family      family="JetBrainsMono Nerd Font Mono"
bold_font        auto
italic_font      auto
bold_italic_font auto
# END_KITTY_FONTS


=== pacman-installs.txt ===
alsa-utils
arp-scan
base
base-devel
bash-completion
blueman
bluez
bluez-utils
brightnessctl
btop
cellwriter
cifs-utils
cliphist
cmake
cockpit
cpupower
ctop
darktable
deskflow
docker
docker-compose
dolphin
dos2unix
dosfstools
dunst
efibootmgr
eza
falkon
feh
firefox
flameshot
font-manager
foot
fuse2
fzf
gammastep
gcc
geckodriver
gesture-manager-git
ghostty
git
glfw
glow
grafana
grim
grit
grub
gtk-vnc
gvim
httpie
hyprland
hyprland-qtutils
hyprlock
hyprpaper
hyprpicker
hyprshot-git
hyprsysteminfo
imagemagick
inxi
isync
jellyfin-server
jellyfin-web
jq
kitty
krita
less
libinput-gestures
linux
linux-firmware
lsof
make
mako
mopidy
mosh
mpv
msmtp
nano
ncdu
ncspot-bin
neofetch
neovim
networkmanager
nfs-utils
ngrep
nmap
npm
openssh
openvpn
pacman-contrib
pamixer
paru-bin
patch
pavucontrol
pipewire
pipewire-alsa
pipewire-pulse
pkgconf
power-profiles-daemon
powertop
prometheus
putty
pyenv
qbittorrent-nox
qt5-wayland
qt5-webengine
qt6-wayland
remmina
ripcord
rofi
rofi-emoji
simplescreenrecorder
slurp
smbclient
socat
sqlitebrowser
sshfs
sshpass
sudo
sway
swaybg
swaylock-effects
swaync
tcpdump
termshark
ticker
tigervnc
timeshift
tk
tmux
tor
tor-browser-alpha-bin
torsocks
tree
ttf-cascadia-code
ttf-fira-code
ttf-font-awesome
ttf-ibmplex-mono-nerd
ttf-jetbrains-mono-nerd
ttf-maple-beta
ttf-maple-beta-nf
ttf-maple-beta-nf-cn
ttf-material-design-icons-webfont
ttf-roboto-mono
tumbler
unzip
upscayl-bin
usbip
vulkan-intel
wacom-settings-git
wacomtablet
wakeonlan
waybar
wayland-protocols
wayland-utils
waylock
waynergy
wayvnc
wget
wireguard-tools
wireless-regdb
wireplumber
wl-clipboard
wlroots
wmctrl
wtype
xclip
xdotool
xf86-input-wacom
xf86-video-intel
xorg-server
xournalpp
yay
yay-debug
ydotool
yetris
zram-generator
zsh

=== System Information (inxi -Fxz) ===

System:
  Kernel: 6.14.1-arch1-1 arch: x86_64 bits: 64
    compiler: gcc v: 14.2.1
  Desktop: Hyprland v: 0.48.1 Distro: Arch Linux
Machine:
  Type: Laptop System: LENOVO product: 82V6
    v: IdeaPad 1 14IGL7 serial: <superuser required>
  Mobo: LENOVO model: LNVNB161216
    v: SDK0T76477 WIN serial: <superuser required>
    UEFI: LENOVO v: KKCN23WW date: 03/29/2024
Battery:
  ID-1: BAT0 charge: 40.9 Wh (100.0%)
    condition: 40.9/42.0 Wh (97.3%) volts: 12.8
    min: 11.2 model: Sunwoda L21D3PF0 status: full
CPU:
  Info: dual core model: Intel Celeron N4020
    bits: 64 type: MCP arch: Goldmont Plus rev: 8
    cache: L1: 112 KiB L2: 4 MiB
  Speed (MHz): avg: 2786 min/max: 800/2800 cores:
    1: 2786 2: 2786 bogomips: 4377
  Flags: ht lm nx pae sse sse2 sse3 sse4_1
    sse4_2 ssse3 vmx
Graphics:
  Device-1: Intel GeminiLake [UHD Graphics 600]
    vendor: Lenovo driver: i915 v: kernel
    arch: Gen-9.5 bus-ID: 00:02.0
  Device-2: IMC Networks Integrated Camera
    driver: uvcvideo type: USB bus-ID: 1-7:3
  Display: wayland server: X.org v: 1.21.1.16
    with: Xwayland v: 24.1.6 compositor: Hyprland
    v: 0.48.1 driver: gpu: i915
    resolution: no compositor data
    resolution: 1366x768
  API: EGL Message: EGL data requires eglinfo.
    Check --recommends.
  Info: Tools: wl: swaymsg,wayland-info
    x11: xprop
Audio:
  Device-1: Intel Celeron/Pentium Silver Processor
    High Definition Audio vendor: Lenovo
    driver: snd_hda_intel v: kernel bus-ID: 00:0e.0
  API: ALSA v: k6.14.1-arch1-1 status: kernel-api
  Server-1: sndiod v: N/A status: off
  Server-2: PipeWire v: 1.4.1 status: active
Network:
  Device-1: Realtek RTL8852BE PCIe 802.11ax
    Wireless Network vendor: Lenovo
    driver: rtw89_8852be v: kernel port: 1000
    bus-ID: 03:00.0
  IF: wlp3s0 state: up mac: <filter>
  IF-ID-1: br-63615dd31ca3 state: down
    mac: <filter>
  IF-ID-2: br-a76143f9e7bd state: up
    speed: 10000 Mbps duplex: unknown mac: <filter>
  IF-ID-3: br-e76bed31d799 state: up
    speed: 10000 Mbps duplex: unknown mac: <filter>
  IF-ID-4: br-ed3f0d75a166 state: down
    mac: <filter>
  IF-ID-5: docker0 state: down mac: <filter>
  IF-ID-6: veth1b27660 state: up
    speed: 10000 Mbps duplex: full mac: <filter>
  IF-ID-7: veth67cecef state: up
    speed: 10000 Mbps duplex: full mac: <filter>
  IF-ID-8: vethf560f2e state: up
    speed: 10000 Mbps duplex: full mac: <filter>
Bluetooth:
  Device-1: Realtek Bluetooth Radio driver: btusb
    v: 0.8 type: USB bus-ID: 1-3:2
  Report: btmgmt ID: hci0 rfk-id: 10 state: up
    address: <filter> bt-v: 5.2 lmp-v: 11
Drives:
  Local Storage: total: 116.5 GiB
    used: 86.71 GiB (74.4%)
  ID-1: /dev/mmcblk1 model: MMC128
    size: 116.5 GiB type: Removable
Partition:
  ID-1: / size: 113.62 GiB used: 86.55 GiB (76.2%)
    fs: ext4 dev: /dev/mmcblk1p2
  ID-2: /boot size: 511 MiB
    used: 158.3 MiB (31.0%) fs: vfat
    dev: /dev/mmcblk1p1
Swap:
  ID-1: swap-1 type: file size: 2 GiB
    used: 1.2 MiB (0.1%) file: /swapfile
  ID-2: swap-2 type: zram size: 1.69 GiB
    used: 598.8 MiB (34.6%) dev: /dev/zram0
Sensors:
  System Temperatures: cpu: 41.0 C mobo: N/A
  Fan Speeds (rpm): N/A
Info:
  Memory: total: 4 GiB note: est.
    available: 3.38 GiB used: 2.14 GiB (63.3%)
  Processes: 229 Uptime: 4d 5h 22m Init: systemd
  Packages: 1017 Compilers: gcc: 14.2.1
    Shell: system-info.sh inxi: 3.3.37

=== Memory Information (free -h) ===

               total        used        free      shared  buff/cache   available
Mem:           3.4Gi       2.1Gi       407Mi       390Mi       1.5Gi       1.2Gi
Swap:          3.7Gi       600Mi       3.1Gi

=== Disk Usage (df -h) ===

Filesystem                     Size  Used Avail Use% Mounted on
dev                            1.7G     0  1.7G   0% /dev
run                            1.7G  1.6M  1.7G   1% /run
efivarfs                        16E     0 -5.1K   0% /sys/firmware/efi/efivars
/dev/mmcblk1p2                 114G   87G   22G  81% /
tmpfs                          1.7G  528K  1.7G   1% /dev/shm
tmpfs                          1.0M     0  1.0M   0% /run/credentials/systemd-journald.service
tmpfs                          1.7G   15M  1.7G   1% /tmp
/dev/mmcblk1p1                 511M  159M  353M  31% /boot
tmpfs                          1.0M     0  1.0M   0% /run/credentials/getty@tty1.service
tmpfs                          347M  4.1M  343M   2% /run/user/1000
192.168.1.239:/mnt/netstorage   11T  281G   11T   3% /mnt/netstorage
//192.168.1.68/Shared          111G  106G  4.7G  96% /home/braydenchaffee/mnt/windows-share
//192.168.1.68/Jellyfin        111G  106G  4.7G  96% /home/braydenchaffee/mnt/TempMedia

=== Wayland Session Variables ===

WAYLAND_DISPLAY=wayland-1
MOZ_ENABLE_WAYLAND=1



=== .gitconfig ===
[user]
	name = braydio
	email = chaffee.brayden@gmail.com
	password = Remington0323
[init]
	defaultBranch = main
[url "git@github.com:"]
	insteadOf = https://github.com/
[url "git@github"]
	cominsteadOf = https://github.com/
[pull]
	rebase = true



=== .mbsyncrc ===
# Global Options
SyncState *  # Sync read/unread status and other IMAP metadata globally

# IMAP Account Settings
IMAPAccount gmail
Host imap.gmail.com
User chaffee.brayden@gmail.com
Pass humuterkwxonvjgv 
TLSType IMAPS
AuthMechs LOGIN
PipelineDepth 2  # Improves sync speed by allowing more parallel requests

# Remote IMAP Store
IMAPStore gmail-remote
Account gmail

# Local Maildir Store
MaildirStore gmail-local
Path ~/.mail/Gmail/
Inbox ~/.mail/Gmail/Inbox/
SubFolders Verbatim  # Ensures correct handling of Gmail's folder structure

# Sync Channel for Main Inbox
Channel gmail-main
Far :gmail-remote:"INBOX"
Near :gmail-local:"Inbox"
Create Both
Expunge Both
Sync Pull

Channel gmail-all
Far :gmail-remote:"[Gmail]/All Mail"
Near :gmail-local:"Inbox"
Create Both
Expunge Both
Sync Pull

Channel gmail-trash
Far :gmail-remote:"[Gmail]/Trash"
Near :gmail-local:"Trash"
Patterns "[Gmail]/Trash"
Create Both
Expunge Both
Sync Push  # Only push local deletions, do not pull

# Group Gmail Channels
Group gmail
Channels gmail-main gmail-all gmail-trash



=== mimeapps.list ===
[Default Applications]
inode/chardevice=thunar.desktop
application/octet-stream=vim.desktop
application/zip=thunar.desktop
application/vnd.appimage=com.mitchellh.ghostty.desktop

[Added Associations]
inode/chardevice=thunar.desktop;vim.desktop;
application/octet-stream=vim.desktop;thunar.desktop;
application/zip=thunar.desktop;file-roller.desktop;
application/vnd.appimage=com.mitchellh.ghostty.desktop;
image/jpeg=org.flameshot.Flameshot.desktop;
image/png=firefox.desktop;org.flameshot.Flameshot.desktop;timeshift-gtk.desktop;



=== fast-cat.sh ===
#!/bin/bash

# Aggregates files and directories into a single concatenated file named ".fastcat.txt"
# Uses `fastcat.txt` in the current directory if available; defaults to the current directory otherwise
# Supports exclusion of files and directories specified in `nocat.txt`
# Now includes a directory mapping and excludes unsupported file formats by default

# Script metadata
SCRIPT_NAME="Fast-Cat"
SCRIPT_VERSION="1.8.0"

# Print script name and version
echo -e "\e[34m$SCRIPT_NAME - Version $SCRIPT_VERSION\e[0m"
echo

# Colors for output
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
RESET="\e[0m"

# Default settings
DEFAULT_DIR=$(pwd)
CONCAT_FILE_NAME=".fastcat.txt"
FILELIST_NAME="fastcat.txt"
EXCLUDE_FILE="nocat.txt"
MAPPING_DEPTH=2

TREE_MAP_PATH="$DEFAULT_DIR/.tree-map.txt"
MAP_ONLY=false
UNSUPPORTED_EXTENSIONS=("*.exe" "*.bin" "*.iso" "*.img" "*.mp4" "*.avi" "*.mkv" "*.mp3" "*.flac" "*.zip" "*.tar.gz" "*.rar")

# Function to display help/usage
show_help() {
  echo "Aggregates files and directories into a single concatenated file named .fastcat.txt"
  echo "Uses fastcat.txt in the current directory if available"
  echo "Defaults to all (supported) files in the current directory otherwise"
  echo "Supports exclusion of files and directories flagged or specified in nocat.txt"

  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -h, --help            Display this help message and exit."
  echo "  -d, --dir <dir>       Specify a target directory to process."
  echo "  -f, --file <file>     Specify a file to be processed."
  echo "  -m, --map-depth <n>   Set the directory tree map depth (default: 2)."
  echo "  --map-only            Only generate the directory map."
  exit 0
}

# Parse arguments
TARGET_DIRS=()
USE_FILELIST=false

while [[ "$#" -gt 0 ]]; do
  case $1 in
  -h | --help) show_help ;;
  -d | --dir)
    TARGET_DIRS+=("$2")
    shift
    ;;
  -f | --file)
    TARGET_DIRS+=("$2")
    shift
    ;;
  -m | --map-depth)
    MAPPING_DEPTH="$2"
    shift
    ;;
  --map-only) MAP_ONLY=true ;;
  *)
    echo -e "${RED}Unknown argument: $1${RESET}"
    exit 1
    ;;
  esac
  shift
done

# Use `fastcat.txt` if it exists and no flags are passed
if [ -f "$DEFAULT_DIR/$FILELIST_NAME" ] && [ ${#TARGET_DIRS[@]} -eq 0 ]; then
  echo -e "${YELLOW}Using filelist: $FILELIST_NAME${RESET}"
  mapfile -t TARGET_DIRS <"$DEFAULT_DIR/$FILELIST_NAME"
  USE_FILELIST=true
fi

# Default to current directory if no filelist and no flags
if [ ${#TARGET_DIRS[@]} -eq 0 ]; then
  echo -e "${YELLOW}No filelist -- $FILELIST_NAME or flags detected. Defaulting to current directory.${RESET}"
  TARGET_DIRS+=("$DEFAULT_DIR")
fi

# Read exclude file if it exists
EXCLUDE_LIST=()
if [ -f "$DEFAULT_DIR/$EXCLUDE_FILE" ]; then
  echo -e "${YELLOW}Using exclusion list: $EXCLUDE_FILE${RESET}"
  mapfile -t EXCLUDE_LIST <"$DEFAULT_DIR/$EXCLUDE_FILE"
fi

# Expand wildcard exclusions from nocat.txt
EXCLUDED_EXTENSIONS=()
for EXCLUDE in "${EXCLUDE_LIST[@]}"; do
  if [[ "$EXCLUDE" == *.* ]]; then
    EXCLUDED_EXTENSIONS+=("*$EXCLUDE")
  fi
done

# Merge default unsupported file formats with user-defined exclusions
ALL_EXCLUDED_EXTENSIONS=("${UNSUPPORTED_EXTENSIONS[@]}" "${EXCLUDED_EXTENSIONS[@]}")

# Notify user of concatenated file location
CONCAT_FILE_PATH="$DEFAULT_DIR/$CONCAT_FILE_NAME"
>"$CONCAT_FILE_PATH"

# Display directory mapping
echo -e "${GREEN}Directory Mapping:${RESET}"
for DIR in "${TARGET_DIRS[@]}"; do
  echo -e "  ${YELLOW}$DIR${RESET}"
done
echo ""

# Function to check if a file or directory is excluded
is_excluded() {
  local ITEM="$1"
  for EXCLUDED in "${EXCLUDE_LIST[@]}"; do
    if [[ "$ITEM" == *"$EXCLUDED"* ]]; then
      return 0
    fi
  done
  for EXT in "${ALL_EXCLUDED_EXTENSIONS[@]}"; do
    if [[ "$ITEM" == $EXT ]]; then
      return 0
    fi
  done
  return 1
}

# Recursive function to print the directory tree
print_tree() {
  local DIR="$1"
  local PREFIX="$2"
  local DEPTH="$3"

  if ((DEPTH > MAPPING_DEPTH)); then
    return
  fi

  local ENTRIES=("$DIR"/*)
  local TOTAL=${#ENTRIES[@]}
  local COUNT=0

  for ENTRY in "${ENTRIES[@]}"; do
    ((COUNT++))
    local CONNECTOR="├──"
    local NEXT_PREFIX="$PREFIX│   "
    if [ "$COUNT" -eq "$TOTAL" ]; then
      CONNECTOR="└──"
      NEXT_PREFIX="$PREFIX    "
    fi

    if [ -d "$ENTRY" ]; then
      # Print to terminal with color
      echo -e "${PREFIX}${CONNECTOR} ${YELLOW}$(basename "$ENTRY")${RESET}"
      # Print to file without color
      echo -e "${PREFIX}${CONNECTOR} $(basename "$ENTRY")" >>"$TREE_MAP_PATH"
      print_tree "$ENTRY" "$NEXT_PREFIX" $((DEPTH + 1))
    elif [ -f "$ENTRY" ]; then
      echo -e "${PREFIX}${CONNECTOR} $(basename "$ENTRY")"
      echo -e "${PREFIX}${CONNECTOR} $(basename "$ENTRY")" >>"$TREE_MAP_PATH"
    fi
  done
}

echo -e "${GREEN}Directory Tree Mapping (Depth: $MAPPING_DEPTH):${RESET}"
echo "Directory Tree Mapping" >"$TREE_MAP_PATH"
for DIR in "${TARGET_DIRS[@]}"; do
  if [ -d "$DIR" ]; then
    echo -e "${YELLOW}${DIR}${RESET}" | tee -a "$TREE_MAP_PATH"
    print_tree "$DIR" "" 1
  elif [ -f "$DIR" ]; then
    echo -e "${YELLOW}File: $DIR${RESET}" | tee -a "$TREE_MAP_PATH"
  else
    echo -e "${RED}Invalid target: $DIR${RESET}" | tee -a "$TREE_MAP_PATH"
  fi
done
echo ""

if [ "$MAP_ONLY" = true ]; then
  echo -e "${YELLOW}Map-only mode enabled. Skipping concatenation.${RESET}"
  echo -e "${GREEN}Tree map saved to: $TREE_MAP_PATH${RESET}"
  exit 0
fi

# Counters for success and failure
success_count=0
failure_count=0

# Process each file or directory
for TARGET in "${TARGET_DIRS[@]}"; do
  TARGET=$(eval echo "$TARGET") # Expand variables or ~
  if [ -d "$TARGET" ]; then
    if is_excluded "$TARGET"; then
      echo -e "${YELLOW}Skipping excluded directory: $TARGET${RESET}"
      continue
    fi
    echo -e "${GREEN}Processing directory: $TARGET${RESET}"
    for FILE in "$TARGET"/*; do
      if [ -f "$FILE" ]; then
        if is_excluded "$FILE"; then
          echo -e "${YELLOW}Skipping excluded file: $FILE${RESET}"
          continue
        fi
        echo "=== $(basename "$FILE") ===" >>"$CONCAT_FILE_PATH"
        cat "$FILE" >>"$CONCAT_FILE_PATH" && echo -e "\n\n" >>"$CONCAT_FILE_PATH"
        echo -e "${GREEN}Added $FILE to $CONCAT_FILE_NAME${RESET}"
        ((success_count++))
      fi
    done
  elif [ -f "$TARGET" ]; then
    if is_excluded "$TARGET"; then
      echo -e "${YELLOW}Skipping excluded file: $TARGET${RESET}"
      continue
    fi
    echo -e "${GREEN}Processing file: $TARGET${RESET}"
    echo "=== $(basename "$TARGET") ===" >>"$CONCAT_FILE_PATH"
    cat "$TARGET" >>"$CONCAT_FILE_PATH" && echo -e "\n\n" >>"$CONCAT_FILE_PATH"
    echo -e "${GREEN}Added $TARGET to $CONCAT_FILE_NAME${RESET}"
    ((success_count++))
  else
    echo -e "${RED}Target not found: $TARGET${RESET}"
    ((failure_count++))
  fi
done

# Notify user of completion
echo -e "${GREEN}Concatenation complete.${RESET}"
echo -e "${GREEN}$success_count${RESET} files added, ${RED}$failure_count${RESET} targets failed."
echo -e "${GREEN}Output saved to: $CONCAT_FILE_PATH${RESET}"

# Copy the output file to the clipboard
if command -v xclip &>/dev/null; then
  xclip -selection clipboard <"$CONCAT_FILE_PATH"
  echo -e "${GREEN}Copied .fastcat.txt to clipboard using xclip.${RESET}"
elif command -v xsel &>/dev/null; then
  xsel --clipboard <"$CONCAT_FILE_PATH"
  echo -e "${GREEN}Copied .fastcat.txt to clipboard using xsel.${RESET}"
else
  echo -e "${YELLOW}Neither xclip nor xsel is installed. Cannot copy to clipboard.${RESET}"
fi



=== uncat.sh ===
#!/bin/bash

# Fast Un-Cat - Reconstructs individual files from .fastcat.txt
SCRIPT_NAME="UnCat Fastcat"
SCRIPT_VERSION="1.0.0"

echo -e "\e[34m$SCRIPT_NAME - Version $SCRIPT_VERSION\e[0m\n"

INPUT_FILE=".fastcat.txt"
OUTPUT_DIR="./uncat_output"
mkdir -p "$OUTPUT_DIR"

if [[ ! -f "$INPUT_FILE" ]]; then
  echo -e "\e[31mError: $INPUT_FILE not found in the current directory.\e[0m"
  exit 1
fi

current_file=""
success_count=0

while IFS= read -r line; do
  if [[ "$line" =~ ^===\ (.+)\ ===$ ]]; then
    current_file="${BASH_REMATCH[1]}"
    echo -e "\e[32mCreating file: $current_file\e[0m"
    exec 3>"$OUTPUT_DIR/$current_file"
    ((success_count++))
  elif [[ -n "$current_file" ]]; then
    echo "$line" >&3
  fi
done <"$INPUT_FILE"

# Close the last file descriptor if open
exec 3>&-

echo -e "\n\e[32mUn-catenation complete.\e[0m"
echo -e "\e[32mExtracted $success_count files to: $OUTPUT_DIR/\e[0m"



=== gitcommit-alias.sh ===

#!/bin/bash

FILE="$1"

if [ -z "$FILE" ]; then
  echo "Usage: $0 <filename>"
  exit 1
fi

if [ ! -f "$FILE" ]; then
  echo "File '$FILE' does not exist."
  exit 1
fi

BASENAME=$(basename "$FILE")

# Fetch latest commit for the file
LATEST_COMMIT_MSG=$(git log -1 --pretty=%s -- "$FILE")

# Extract version number from commit message
if [[ $LATEST_COMMIT_MSG =~ ([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
  CURRENT_MAJOR=${BASH_REMATCH[1]}
  CURRENT_MINOR=${BASH_REMATCH[2]}
  CURRENT_PATCH=${BASH_REMATCH[3]}
  CURRENT_MINOR=$((CURRENT_MINOR + 1))  # Increment minor (10th position)
else
  CURRENT_MAJOR=1
  CURRENT_MINOR=0
  CURRENT_PATCH=0
fi

NEW_VERSION="$CURRENT_MAJOR.$CURRENT_MINOR.$CURRENT_PATCH"
DATE=$(date '+%Y-%m-%d')

MESSAGE="$DATE - $BASENAME - v$CURRENT_MAJOR.$CURRENT_MINOR.$CURRENT_PATCH"

git add "$FILE"
git commit -m "$MESSAGE"
git push

echo "Committed and pushed '$FILE' as version v${CURRENT_MAJOR}.${CURRENT_MINOR}.${CURRENT_PATCH}"




=== upload-gitcommit.sh ===

#!/bin/bash

# Backup system files to a Git directory for versioning
# Repurposed from the FileAggredizer script

# Script metadata
SCRIPT_NAME="UpDotGit"
SCRIPT_VERSION="1.0"

# Print script name and version
echo -e "\e[34m$SCRIPT_NAME - Version $SCRIPT_VERSION\e[0m"
echo

# Define directories
GIT_BACKUP_DIR="$HOME/Uploads/Github/dotfiles"
CONFIG_FILE="$HOME/Scripts/file-mgmt/dotgit-files.txt"
LOG_FILE="$GIT_BACKUP_DIR/backup_failures.log"

# Create Git backup directory if it doesn't exist
mkdir -p "$GIT_BACKUP_DIR"

# Initialize log file
> "$LOG_FILE"

# Check if the config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "\e[31mError: Config file '$CONFIG_FILE' not found.\e[0m"
    exit 1
fi

# Counters for success and failure
success_count=0
failure_count=0

# Process each file or directory from the config file
while IFS= read -r ENTRY; do
    # Skip empty lines and comments
    [[ -z "$ENTRY" || "$ENTRY" == \#* ]] && continue

    # Expand tilde and variables
    ENTRY=$(eval echo "$ENTRY")

    # Validate the file or directory
    if [ -f "$ENTRY" ]; then
        DEST="$GIT_BACKUP_DIR/${ENTRY#$HOME/}"
        mkdir -p "$(dirname "$DEST")"
        if cp "$ENTRY" "$DEST" 2>/dev/null; then
            echo -e "\e[32mCopied $ENTRY to $DEST\e[0m"
            ((success_count++))
        else
            echo -e "\e[31mFailed to copy $ENTRY to $DEST\e[0m" | tee -a "$LOG_FILE"
            ((failure_count++))
        fi
    elif [ -d "$ENTRY" ]; then
        find -L "$ENTRY" -type f -print | while IFS= read -r FILE; do
            DEST="$GIT_BACKUP_DIR/${FILE#$HOME/}"
            mkdir -p "$(dirname "$DEST")"
            if cp "$FILE" "$DEST" 2>/dev/null; then
                echo -e "\e[32mCopied $FILE to $DEST\e[0m"
                ((success_count++))
            else
                echo -e "\e[31mFailed to copy $FILE to $DEST\e[0m" | tee -a "$LOG_FILE"
                ((failure_count++))
            fi
        done
    else
        echo -e "\e[33mFile or directory does not exist: $ENTRY\e[0m" | tee -a "$LOG_FILE"
    fi
done < "$CONFIG_FILE"

# Notify user of completion
echo -e "\e[32m$success_count files copied successfully.\e[0m"
echo -e "\e[31m$failure_count files failed to copy.\e[0m"
echo -e "\e[33mLog of failures saved at: $LOG_FILE\e[0m"

# Commit changes
cd "$GIT_BACKUP_DIR" || exit
git add .
git commit -m "UpDotGit Backup Saved on: $(date +"%Y-%m-%d %H:%M:%S")"
echo -e "\e[32mChanges committed to Git.\e[0m"

# Notify user
echo -e "\e[32mBackup completed. Files are in $GIT_BACKUP_DIR.\e[0m"



=== system-info.sh ===
#!/bin/bash

# Aggregates all files and directories listed in CONFIG_FILE to UPLOAD_DIR/system-info
# Writes installed packages to ~/Documents/SystemInfo/pacman-installs.txt
# Formats the consolidated file as Markdown with an index

# Script metadata
SCRIPT_NAME="System Info Collector ArchLaptop"
SCRIPT_VERSION="2.4"

# Print script name and version
echo -e "\e[34m$SCRIPT_NAME - Version $SCRIPT_VERSION\e[0m"
echo

# Define directories
UPLOAD_DIR="$HOME/Uploads/Archlinux/ArchLaptop/LatestSync/"
SYSTEM_INFO_DIR="$UPLOAD_DIR/system-info"
CONFIG_FILE="$HOME/Uploads/Archlinux/ArchLaptop/upload-files.txt"
CONCAT_FILE="$UPLOAD_DIR/sys.txt"
SYSFILES_MD="$UPLOAD_DIR/sys.md"
LOG_FILE="$UPLOAD_DIR/copy_failures.log"

# Create directories if they don't exist
mkdir -p "$SYSTEM_INFO_DIR"

# Colors for output
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
RESET="\e[0m"

# Clean the upload directory
echo -e "${YELLOW}Cleaning upload directory: $UPLOAD_DIR...${RESET}"
rm -rf "$UPLOAD_DIR"/*
mkdir -p "$UPLOAD_DIR"
echo -e "${GREEN}Upload directory cleaned.${RESET}"

# Clean the system-info directory
echo -e "${YELLOW}Cleaning system-info directory: $SYSTEM_INFO_DIR...${RESET}"
rm -rf "$SYSTEM_INFO_DIR"/*
mkdir -p "$SYSTEM_INFO_DIR"
echo -e "${GREEN}System-info directory cleaned.${RESET}"

# Initialize log file
>"$LOG_FILE"

# Save installed packages
SYSTEM_INFO_FILE="$HOME/Documents/SystemInfo/pacman-installs.txt"
echo -e "${YELLOW}Saving installed packages to $SYSTEM_INFO_FILE...${RESET}"
if pacman -Qqe >"$SYSTEM_INFO_FILE" 2>/dev/null; then
  echo -e "${GREEN}Installed packages saved to $SYSTEM_INFO_FILE${RESET}"
else
  echo -e "${RED}Failed to save installed packages.${RESET}"
fi

# Save system information to the same file
echo -e "\n=== System Information (inxi -Fxz) ===\n" >>"$SYSTEM_INFO_FILE"
inxi -Fxz >>"$SYSTEM_INFO_FILE" 2>/dev/null

echo -e "\n=== Memory Information (free -h) ===\n" >>"$SYSTEM_INFO_FILE"
free -h >>"$SYSTEM_INFO_FILE"

echo -e "\n=== Disk Usage (df -h) ===\n" >>"$SYSTEM_INFO_FILE"
df -h >>"$SYSTEM_INFO_FILE"

echo -e "\n=== Wayland Session Variables ===\n" >>"$SYSTEM_INFO_FILE"
env | grep WAYLAND >>"$SYSTEM_INFO_FILE"

# Check if the config file exists
if [ ! -f "$CONFIG_FILE" ]; then
  echo -e "${RED}Error: Config file '$CONFIG_FILE' not found.${RESET}"
  exit 1
fi

# Counters for success and failure
success_count=0
failure_count=0

# Start with empty files
>"$CONCAT_FILE"
>"$SYSFILES_MD"

# Create Markdown header
echo -e "# System Files\n\n## Index\n" >>"$SYSFILES_MD"

# Process each file or directory from the config file
section_counter=1
while IFS= read -r ENTRY; do
  # Skip empty lines and comments
  [[ -z "$ENTRY" || "$ENTRY" == \#* ]] && continue

  # Expand tilde and variables
  ENTRY=$(eval echo "$ENTRY")

  # Validate the file or directory
  if [ -f "$ENTRY" ]; then
    DEST="$SYSTEM_INFO_DIR/${ENTRY#$HOME/}"
    mkdir -p "$(dirname "$DEST")"
    if cp "$ENTRY" "$DEST" 2>/dev/null; then
      echo -e "${GREEN}Copied $ENTRY to $DEST${RESET}"
      ((success_count++))

      # Add to the concatenated file
      echo "=== $(basename "$ENTRY") ===" >>"$CONCAT_FILE"
      cat "$ENTRY" >>"$CONCAT_FILE"
      echo -e "\n\n" >>"$CONCAT_FILE"

      # Add to Markdown file
      section_title="$(basename "$ENTRY")"
      anchor="section-$section_counter"
      echo "- [$section_title](#$anchor)" >>"$SYSFILES_MD"
      echo -e "\n## $section_title\n<a id=\"$anchor\"></a>\n" >>"$SYSFILES_MD"
      cat "$ENTRY" >>"$SYSFILES_MD"
      echo -e "\n\n" >>"$SYSFILES_MD"
      ((section_counter++))
    else
      echo -e "${RED}Failed to copy $ENTRY to $DEST${RESET}" | tee -a "$LOG_FILE"
      ((failure_count++))
    fi
  elif [ -d "$ENTRY" ]; then
    while IFS= read -r -d '' FILE; do
      DEST="$SYSTEM_INFO_DIR/${FILE#$HOME/}"
      mkdir -p "$(dirname "$DEST")"
      if cp "$FILE" "$DEST"; then
        echo -e "${GREEN}Copied $FILE to $DEST${RESET}"
        ((success_count++))
      else
        echo -e "${RED}Failed to copy $FILE to $DEST${RESET}" | tee -a "$LOG_FILE"
        ((failure_count++))
      fi
    done < <(find -L "$ENTRY" -type f -print0)

  else
    echo -e "${YELLOW}File or directory does not exist: $ENTRY${RESET}" | tee -a "$LOG_FILE"
  fi
done <"$CONFIG_FILE"

# Notify user of completion
echo -e "${GREEN}Files gathered in $SYSTEM_INFO_DIR${RESET}"
echo -e "${GREEN}$success_count${RESET}/$((success_count + failure_count)) files copied successfully, ${RED}$failure_count${RESET} failed."
echo -e "${GREEN}Concatenated file created at: $CONCAT_FILE${RESET}"
echo -e "${GREEN}Markdown file created at: $SYSFILES_MD${RESET}"
echo -e "${YELLOW}Log of failures saved at: $LOG_FILE${RESET}"

# Commented out this part for now
# Open Dolphin to the upload directory
# if command -v dolphin &>/dev/null; then
#     dolphin "$UPLOAD_DIR" &
# else
#     echo -e "${YELLOW}Dolphin is not installed. Files are in $UPLOAD_DIR.${RESET}"
# fi
#
# Open project folder in browser
# if command -v xdg-open &>/dev/null; then
#     echo -e "${YELLOW}Opening project page in browser...${RESET}"
#     xdg-open "https://chatgpt.com/g/g-p-675e3fc315d481918227664d2b6bf82f-archlinux-install/project" &
# else
#     echo -e "${RED}Failed to open browser. Please visit https://chat.openai.com/${RESET}"
# fi



=== upload-files.txt ===
/etc/fstab
/etc/hostname
/etc/hosts
/etc/pacman.conf
/etc/systemd/zram-generator.conf
$HOME/.bashrc
$HOME/.zshrc
$HOME/.config/hypr/hyprland.conf
$HOME/.config/waybar/config
$HOME/.config/waybar/style.css
$HOME/.config/libinput-gestures.conf
$HOME/.config/environment.d/envvars.conf
$HOME/.config/msmtmp/msmtmprc
$HOME/.config/nvim/init.lua
$HOME/.config/kitty/kitty.conf
$HOME/.config/picom/picom.conf
$HOME/Documents/SystemInfo/pacman-installs.txt
$HOME/Documents/SystemInfo/installed-packages.log
$HOME/.gitconfig
$HOME/.mbsyncrc
$HOME/.config/mimeapps.list
$HOME/.config/user-dirs.dirs
$HOME/.config/gtk-3.0/settings.ini
DIR:$HOME/Scripts/file-mgmt
DIR:$HOME/Scripts/file-mgmt/fast-cat.sh
DIR:$HOME/Scripts/file-mgmt/uncat.sh
DIR:$HOME/Scripts/file-mgmt/gitcommit-alias.sh
DIR:$HOME/Scripts/file-mgmt/upload-gitcommit.sh
DIR:$HOME/Scripts/file-mgmt/system-info.sh
DIR:$HOME/Scripts/file-mgmt/upload-files.txt
DIR:$HOME/Scripts/file-mgmt/upload-gitcommit.sh
DIR:$HOME/Scripts/file-mgmt/quick-backup.sh
DIR:$HOME/Scripts/file-mgmt/remote-file.sh
DIR:$HOME/.config/systemd/user
DIR:$HOME/.local/bin
DIR:$HOME/.config/autostart




=== upload-gitcommit.sh ===

#!/bin/bash

# Backup system files to a Git directory for versioning
# Repurposed from the FileAggredizer script

# Script metadata
SCRIPT_NAME="UpDotGit"
SCRIPT_VERSION="1.0"

# Print script name and version
echo -e "\e[34m$SCRIPT_NAME - Version $SCRIPT_VERSION\e[0m"
echo

# Define directories
GIT_BACKUP_DIR="$HOME/Uploads/Github/dotfiles"
CONFIG_FILE="$HOME/Scripts/file-mgmt/dotgit-files.txt"
LOG_FILE="$GIT_BACKUP_DIR/backup_failures.log"

# Create Git backup directory if it doesn't exist
mkdir -p "$GIT_BACKUP_DIR"

# Initialize log file
> "$LOG_FILE"

# Check if the config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "\e[31mError: Config file '$CONFIG_FILE' not found.\e[0m"
    exit 1
fi

# Counters for success and failure
success_count=0
failure_count=0

# Process each file or directory from the config file
while IFS= read -r ENTRY; do
    # Skip empty lines and comments
    [[ -z "$ENTRY" || "$ENTRY" == \#* ]] && continue

    # Expand tilde and variables
    ENTRY=$(eval echo "$ENTRY")

    # Validate the file or directory
    if [ -f "$ENTRY" ]; then
        DEST="$GIT_BACKUP_DIR/${ENTRY#$HOME/}"
        mkdir -p "$(dirname "$DEST")"
        if cp "$ENTRY" "$DEST" 2>/dev/null; then
            echo -e "\e[32mCopied $ENTRY to $DEST\e[0m"
            ((success_count++))
        else
            echo -e "\e[31mFailed to copy $ENTRY to $DEST\e[0m" | tee -a "$LOG_FILE"
            ((failure_count++))
        fi
    elif [ -d "$ENTRY" ]; then
        find -L "$ENTRY" -type f -print | while IFS= read -r FILE; do
            DEST="$GIT_BACKUP_DIR/${FILE#$HOME/}"
            mkdir -p "$(dirname "$DEST")"
            if cp "$FILE" "$DEST" 2>/dev/null; then
                echo -e "\e[32mCopied $FILE to $DEST\e[0m"
                ((success_count++))
            else
                echo -e "\e[31mFailed to copy $FILE to $DEST\e[0m" | tee -a "$LOG_FILE"
                ((failure_count++))
            fi
        done
    else
        echo -e "\e[33mFile or directory does not exist: $ENTRY\e[0m" | tee -a "$LOG_FILE"
    fi
done < "$CONFIG_FILE"

# Notify user of completion
echo -e "\e[32m$success_count files copied successfully.\e[0m"
echo -e "\e[31m$failure_count files failed to copy.\e[0m"
echo -e "\e[33mLog of failures saved at: $LOG_FILE\e[0m"

# Commit changes
cd "$GIT_BACKUP_DIR" || exit
git add .
git commit -m "UpDotGit Backup Saved on: $(date +"%Y-%m-%d %H:%M:%S")"
echo -e "\e[32mChanges committed to Git.\e[0m"

# Notify user
echo -e "\e[32mBackup completed. Files are in $GIT_BACKUP_DIR.\e[0m"



=== quick-backup.sh ===

#!/bin/bash

# Default backup directory
BACKUP_DIR="${PWD}/backups"
mkdir -p "$BACKUP_DIR"

# Function to create a backup
backup_file() {
    # Determine the file to back up
    if [ $# -eq 0 ]; then
        # Find all files in the current directory
        FILES=($(find . -maxdepth 1 -type f))
        FILE_COUNT=${#FILES[@]}

        if [ $FILE_COUNT -eq 0 ]; then
            echo "Error: No files found in the current directory to back up."
            exit 1
        elif [ $FILE_COUNT -eq 1 ]; then
            FILE="${FILES[0]}"
        else
            # Use fuzzy finder for multiple files
            echo "Select a file to back up:"
            if command -v fzf &>/dev/null; then
                FILE=$(printf "%s\n" "${FILES[@]}" | fzf)
            else
                echo "Error: Multiple files found. Install 'fzf' for easy selection."
                exit 1
            fi
        fi
    elif [ $# -eq 1 ]; then
        FILE=$1
    else
        echo "Usage: quickbackup [file]"
        exit 1
    fi

    # Ensure the file exists
    if [ ! -f "$FILE" ]; then
        echo "Error: File '$FILE' does not exist."
        exit 1
    fi

    # Simplified filenames for backups
    FILENAME=$(basename "$FILE")
    BACKUP_PREFIX="${BACKUP_DIR}/${FILENAME}"
    BACKUPS=("$BACKUP_PREFIX".*)

    # Remove the oldest backup if more than 2 exist
    if [ ${#BACKUPS[@]} -gt 1 ]; then
        OLDEST_BACKUP=$(ls -t "${BACKUPS[@]}" 2>/dev/null | tail -n 1)
        rm -f "$OLDEST_BACKUP"
    fi

    # Determine the next available version
    NEXT_VERSION=$(($(ls "${BACKUP_PREFIX}".* 2>/dev/null | wc -l) + 1))

    # Save the backup
    BACKUP_FILE="${BACKUP_PREFIX}.${NEXT_VERSION}"
    cp "$FILE" "$BACKUP_FILE"
    echo "Backup for '$FILE' created as '$BACKUP_FILE'."
}

# Function to restore a backup
restore_backup() {
    if [ ! -d "$BACKUP_DIR" ]; then
        echo "Error: Backup directory $BACKUP_DIR does not exist."
        exit 1
    fi

    BACKUPS=("$BACKUP_DIR"/*)

    if [ ${#BACKUPS[@]} -eq 0 ]; then
        echo "Error: No backup files found in $BACKUP_DIR."
        exit 1
    elif [ ${#BACKUPS[@]} -eq 1 ]; then
        SELECTED_BACKUP="${BACKUPS[0]}"
    else
        echo "Select a backup to restore:"
        if command -v fzf &>/dev/null; then
            SELECTED_BACKUP=$(printf "%s\n" "${BACKUPS[@]}" | fzf)
        else
            echo "Error: Multiple backups found. Install 'fzf' for easy selection."
            exit 1
        fi
    fi

    if [ -n "$SELECTED_BACKUP" ]; then
        RESTORED_FILE=$(basename "${SELECTED_BACKUP}" | sed 's/\.[0-9]*$//')
        cp "$SELECTED_BACKUP" "$RESTORED_FILE"
        echo "Backup restored as '$RESTORED_FILE'."
    else
        echo "No backup selected. Restore operation canceled."
        exit 1
    fi
}

# Main script logic
case "$1" in
    -r)
        restore_backup
        ;;
    *)
        backup_file "$@"
        ;;
esac



=== remote-file.sh ===
#!/bin/bash

# Usage: ./remote-file.sh get|send [-s server] [-src source_path] [-dst destination_path]

# Default paths
DEFAULT_SRC_PATH="/home/braydenchaffee/Uploads/Source/"
DEFAULT_DST_PATH="/home/braydenchaffee/Downloads/Fetch/"

# Initialize variables
ACTION=""
SRC_PATH="$DEFAULT_SRC_PATH"
DST_PATH="$DEFAULT_DST_PATH"
SELECTED_SERVER=""
PASSWORD=""

# Remote server credentials
SERVERS=(
  "192.168.1.85:Raspberry Pi 4:03231997:braydenchaffee"
  "192.168.1.78:Pi Zero W:03231997:braydenchaffee"
  "192.168.1.225:MacBook Pro:braydenchaffee"
  "192.168.1.227:Archlinux Laptop:0323:braydenchaffee"
)

# Function to display usage
usage() {
  echo "Usage: $0 get|send [-s server] [-src source_path] [-dst destination_path]"
  exit 1
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
  get | send)
    ACTION="$1"
    ;;
  -s | --server)
    SELECTED_SERVER="$2"
    shift
    ;;
  -src | --source)
    SRC_PATH="$2"
    shift
    ;;
  -dst | --destination)
    DST_PATH="$2"
    shift
    ;;
  *)
    echo "Unknown option: $1"
    usage
    ;;
  esac
  shift
done

# Validate action
if [[ -z "$ACTION" ]]; then
  echo "Error: You must specify an action (get or send)."
  usage
fi

# Prompt user to select a server if none provided
if [[ -z "$SELECTED_SERVER" ]]; then
  echo "Select the server:"
  select SERVER_INFO in "${SERVERS[@]}"; do
    if [[ -n "$SERVER_INFO" ]]; then
      SELECTED_SERVER="$SERVER_INFO"
      break
    else
      echo "Invalid selection."
    fi
  done
fi

# Extract server details
SERVER=$(echo "$SELECTED_SERVER" | cut -d':' -f1)
DEVICE=$(echo "$SELECTED_SERVER" | cut -d':' -f2)
PASSWORD=$(echo "$SELECTED_SERVER" | cut -d':' -f3)
USER=$(echo "$SELECTED_SERVER" | cut -d':' -f4)

echo "Selected server: $DEVICE ($SERVER)"

# Perform the action
if [[ "$ACTION" == "get" ]]; then
  echo "Fetching file from $DEVICE..."
  sshpass -p "$PASSWORD" scp "$USER@$SERVER:$SRC_PATH" "$DST_PATH"
elif [[ "$ACTION" == "send" ]]; then
  echo "Sending file to $DEVICE..."
  sshpass -p "$PASSWORD" scp "$SRC_PATH" "$USER@$SERVER:$DST_PATH"
else
  echo "Invalid action. Use 'get' or 'send'."
  exit 1
fi



